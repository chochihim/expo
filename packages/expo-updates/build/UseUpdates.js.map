{"version":3,"file":"UseUpdates.js","sourceRoot":"","sources":["../src/UseUpdates.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AAO9D,OAAO,EACL,gBAAgB,EAChB,sBAAsB,EACtB,6BAA6B,GAC9B,MAAM,mBAAmB,CAAC;AAI3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,MAAM,CAAC,MAAM,UAAU,GAA+B,GAAG,EAAE;IACzD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAsB,sBAAsB,CAAC,CAAC;IAE9F,MAAM,OAAO,GAAG,4BAA4B,EAAE,CAAC;IAE/C,iEAAiE;IACjE,SAAS,CAAC,GAAG,EAAE;QACb,eAAe,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,6BAA6B,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1F,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,wDAAwD;IACxD,OAAO;QACL,gBAAgB;QAChB,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useNativeStateMachineContext } from './UpdatesHooks';\nimport {\n  CurrentlyRunningInfo,\n  UpdateInfo,\n  UseUpdatesStateType,\n  UseUpdatesReturnType,\n} from './UseUpdates.types';\nimport {\n  currentlyRunning,\n  defaultUseUpdatesState,\n  reduceUpdatesStateFromContext,\n} from './UseUpdatesUtils';\n\nexport type { CurrentlyRunningInfo, UpdateInfo, UseUpdatesReturnType };\n\n/**\n * Hook that obtains information on available updates and on the currently running update.\n *\n * @return the structures with information on currently running and available updates.\n *\n * @example\n * ```tsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import * as Updates from 'expo-updates';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n *\n * export default function UpdatesDemo() {\n *   const {\n *     currentlyRunning,\n *     availableUpdate,\n *     isUpdateAvailable,\n *     isUpdatePending\n *   } = Updates.useUpdates();\n *\n *   React.useEffect(() => {\n *     if (isUpdatePending) {\n *       // Update has successfully downloaded\n *       runUpdate();\n *     }\n *   }, [isUpdatePending]);\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = isUpdateAvailable;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={() => Updates.checkForUpdateAsync()} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={() => Updates.fetchUpdateAsync()} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n * ```\n */\nexport const useUpdates: () => UseUpdatesReturnType = () => {\n  const [updatesState, setUpdatesState] = useState<UseUpdatesStateType>(defaultUseUpdatesState);\n\n  const context = useNativeStateMachineContext();\n\n  // Change the state based on native state machine context changes\n  useEffect(() => {\n    setUpdatesState((updatesState) => reduceUpdatesStateFromContext(updatesState, context));\n  }, [context]);\n\n  // Return the updates info and the user facing functions\n  return {\n    currentlyRunning,\n    ...updatesState,\n  };\n};\n"]}