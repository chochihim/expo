{"version":3,"file":"UseUpdates.js","sourceRoot":"","sources":["../src/UseUpdates.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AAC9D,OAAO,EAKL,2BAA2B,GAC5B,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,EACL,gBAAgB,EAChB,sBAAsB,EACtB,6BAA6B,GAC9B,MAAM,mBAAmB,CAAC;AAE3B;;;;GAIG;AACH,MAAM,cAAc,GAAG,GAAG,EAAE;IAC1B,OAAO,CAAC,mBAAmB,EAAE,CAAC;AAChC,CAAC,CAAC;AACF;;;;;GAKG;AACH,MAAM,cAAc,GAAG,GAAG,EAAE;IAC1B,OAAO,CAAC,gBAAgB,EAAE,CAAC;AAC7B,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,OAAO,CAAC,WAAW,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,cAAc,GAA8B,CAAC,SAAiB,OAAO,EAAE,EAAE;IAC7E,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC;SAChC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QACnB,mBAAmB,CAAC;YAClB,IAAI,EAAE,2BAA2B,CAAC,yBAAyB;YAC3D,UAAU;SACX,CAAC,CAAC;IACL,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACf,mBAAmB,CAAC;YAClB,IAAI,EAAE,2BAA2B,CAAC,KAAK;YACvC,KAAK;SACN,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkDG;AACH,MAAM,UAAU,GAA+B,GAAG,EAAE;IAClD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAsB,sBAAsB,CAAC,CAAC;IAE9F,MAAM,OAAO,GAAG,4BAA4B,EAAE,CAAC;IAE/C,iEAAiE;IACjE,SAAS,CAAC,GAAG,EAAE;QACb,eAAe,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,6BAA6B,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1F,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,sDAAsD;IACtD,wBAAwB,CAAC,CAAC,KAAK,EAAE,EAAE;QACjC,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,2BAA2B,CAAC,KAAK;gBACpC,eAAe,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBACjC,GAAG,YAAY;oBACf,KAAK,EAAE,KAAK,CAAC,KAAK;iBACnB,CAAC,CAAC,CAAC;gBACJ,MAAM;YACR,KAAK,2BAA2B,CAAC,yBAAyB;gBACxD,eAAe,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBACjC,GAAG,YAAY;oBACf,UAAU,EAAE,KAAK,EAAE,UAAU;iBAC9B,CAAC,CAAC,CAAC;gBACJ,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC,CAAC,CAAC;IAEH,wDAAwD;IACxD,OAAO;QACL,gBAAgB;QAChB,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport { emitUseUpdatesEvent } from './UpdatesEmitter';\nimport { useNativeStateMachineContext } from './UpdatesHooks';\nimport {\n  CurrentlyRunningInfo,\n  UpdateInfo,\n  UseUpdatesStateType,\n  UseUpdatesReturnType,\n  UseUpdatesInternalEventType,\n} from './UseUpdates.types';\nimport { useUpdatesInternalEvents } from './UseUpdatesHooks';\nimport {\n  currentlyRunning,\n  defaultUseUpdatesState,\n  reduceUpdatesStateFromContext,\n} from './UseUpdatesUtils';\n\n/**\n * Calls [`Updates.checkForUpdateAsync()`](https://docs.expo.dev/versions/latest/sdk/updates/#updatescheckforupdateasync)\n * and refreshes the `availableUpdate` property with the result.\n * If an error occurs, the `error` property will be set.\n */\nconst checkForUpdate = () => {\n  Updates.checkForUpdateAsync();\n};\n/**\n * Downloads an update, if one is available, using\n * [`Updates.fetchUpdateAsync()`](https://docs.expo.dev/versions/latest/sdk/updates/#updatesfetchupdateasync).\n * This should not be called unless `isUpdateAvailable` is true.\n * If an error occurs, the `error` property will be set.\n */\nconst downloadUpdate = () => {\n  Updates.fetchUpdateAsync();\n};\n\n/**\n * Runs an update by calling [`Updates.reloadAsync()`](https://docs.expo.dev/versions/latest/sdk/updates/#updatesreloadasync).\n * This instructs the app to reload using the most recently downloaded version.\n * This is useful for triggering a newly downloaded update to launch without the user needing to manually restart the app.\n * This should not be called unless there is an available update\n * that has already been successfully downloaded (`isUpdatePending` is true).\n * If an error occurs, the `error` property will be set.\n */\nconst runUpdate = () => {\n  Updates.reloadAsync();\n};\n\n/**\n * Calls `Updates.readLogEntriesAsync()` and sets the `logEntries` property to the results.\n * If an error occurs, the `error` property will be set.\n *\n * @param maxAge Max age of log entries to read, in ms. Defaults to 3600000 (1 hour).\n */\nconst readLogEntries: (maxAge?: number) => void = (maxAge: number = 3600000) => {\n  Updates.readLogEntriesAsync(maxAge)\n    .then((logEntries) => {\n      emitUseUpdatesEvent({\n        type: UseUpdatesInternalEventType.READ_LOG_ENTRIES_COMPLETE,\n        logEntries,\n      });\n    })\n    .catch((error) => {\n      emitUseUpdatesEvent({\n        type: UseUpdatesInternalEventType.ERROR,\n        error,\n      });\n    });\n};\n\n/**\n * Hook that obtains information on available updates and on the currently running update.\n *\n * @return the structures with information on currently running and available updates.\n *\n * @example\n * ```tsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n *\n * import type { UseUpdatesEvent } from '@expo/use-updates';\n * import {\n *   useUpdates,\n *   checkForUpdate,\n *   downloadUpdate,\n *   runUpdate,\n * } from '@expo/use-updates';\n *\n * export default function UpdatesDemo() {\n *   const { currentlyRunning, availableUpdate, isUpdateAvailable, isUpdatePending } = useUpdates();\n *\n *   React.useEffect(() => {\n *     if (isUpdatePending) {\n *       // Update has successfully downloaded\n *       runUpdate();\n *     }\n *   }, [isUpdatePending]);\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = isUpdateAvailable;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n * ```\n */\nconst useUpdates: () => UseUpdatesReturnType = () => {\n  const [updatesState, setUpdatesState] = useState<UseUpdatesStateType>(defaultUseUpdatesState);\n\n  const context = useNativeStateMachineContext();\n\n  // Change the state based on native state machine context changes\n  useEffect(() => {\n    setUpdatesState((updatesState) => reduceUpdatesStateFromContext(updatesState, context));\n  }, [context]);\n\n  // Set up listener for events from readLogEntriesAsync\n  useUpdatesInternalEvents((event) => {\n    switch (event.type) {\n      case UseUpdatesInternalEventType.ERROR:\n        setUpdatesState((updatesState) => ({\n          ...updatesState,\n          error: event.error,\n        }));\n        break;\n      case UseUpdatesInternalEventType.READ_LOG_ENTRIES_COMPLETE:\n        setUpdatesState((updatesState) => ({\n          ...updatesState,\n          logEntries: event?.logEntries,\n        }));\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Return the updates info and the user facing functions\n  return {\n    currentlyRunning,\n    ...updatesState,\n  };\n};\n\nexport { checkForUpdate, downloadUpdate, runUpdate, readLogEntries, useUpdates };\nexport type { CurrentlyRunningInfo, UpdateInfo, UseUpdatesReturnType };\n"]}